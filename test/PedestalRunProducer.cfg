process testECALDigi = 
{

   service = Timing { } 

   service = RandomNumberGeneratorService
   {
      untracked uint32 sourceSeed = 98765
      PSet moduleSeeds =
      {
         untracked uint32 VtxSmeared = 12345
      }
   }

   # initialize  MessageLogger
   include "FWCore/MessageLogger/data/MessageLogger.cfi"
 
   # initialize magnetic field
   include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"
  
   #Geometry
   #
   include "Geometry/EcalCommonData/data/EcalOnly.cfi"

   es_module = TrackerGeometricDetESModule {}
   
   # output
   module out = PoolOutputModule 
   {	
      untracked string fileName = 'digis.root'
   }

   # create empty events using a neutrino gun
   #
   source = FlatRandomEGunSource
   {
      untracked int32 maxEvents = 10
      untracked PSet PGunParameters =
      {
         # you can request more than 1 particle
         untracked vint32 PartID = {14}
         untracked double MinEta = -3.0
         untracked double MaxEta =  3.0
         untracked double MinPhi = -3.14159265358979323846 # in radians
         untracked double MaxPhi =  3.14159265358979323846
         untracked double MinE   =  9.99
         untracked double MaxE   = 10.01
      }
      untracked int32 Verbosity = 0 # set to 1 (or greater)  for printouts
   }

   module VtxSmeared = VertexGenerator 
   {
         string type = "IOMC/EventVertexGenerators/GaussianEventVertexGenerator"
         double MeanX = 0.
         double MeanY = 0.
         double MeanZ = 0.
         double SigmaX = 0.015
         double SigmaY = 0.015
         double SigmaZ = 53.0  // in mm (as in COBRA/OSCAR)
   }
   
   # Geant4-based CMS Det.Simulation
   #
   include "SimG4Core/Application/data/SimG4Object.cfi"

   module mix = MixingModule {
      int32 bunchspace = 25
   }

   include "Geometry/CaloEventSetup/data/CaloGeometry.cfi"

   # use trivial ESProducer for tests
   include "CalibCalorimetry/EcalTrivialCondModules/data/EcalTrivialCondRetriever.cfi"

   include "SimCalorimetry/EcalSimProducers/data/ecaldigi.cfi"

   path p = { VtxSmeared, g4SimHits, mix, ecalUnsuppressedDigis }
   endpath fine = { out }

}

