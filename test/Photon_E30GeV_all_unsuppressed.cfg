process EcalHitsValid  = 
	{
    untracked PSet maxEvents = {untracked int32 input = 100}	

    source = PoolSource {
         untracked vstring fileNames = {'file:Photon_E30GeV_all.root'}
    }
     
  # initialize  MessageLogger
  include "FWCore/MessageLogger/data/MessageLogger.cfi"   

  # initialize magnetic field
  include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

  # geometry (Only Ecal)
  include "Geometry/EcalCommonData/data/EcalOnly.cfi"

  es_module = TrackerGeometricDetESModule {}
   
  module o1 = PoolOutputModule { 
         untracked string fileName = "Photon_E30GeV_all_EcalUnsuppressedValidation.root"      
  }
                                                                                
  # DQM services
  service = DaqMonitorROOTBackEnd{ }

    service = RandomNumberGeneratorService
    {
        PSet moduleSeeds =
        {
            untracked uint32 g4SimHits = 9876
            untracked uint32 ecalUnsuppressedDigis = 12345
        }
    }
  module randomEngineStateProducer = RandomEngineStateProducer { }

  service = Timing{ }
  
  service = SimpleMemoryCheck{ }

  include "SimGeneral/HepPDTESSource/data/pythiapdt.cfi"

  # run simulation, with EcalHits Validation specific watcher 
  include "SimG4Core/Application/data/SimG4Object.cfi"
  replace g4SimHits.Generator.HepMCProductLabel = "source"
  replace g4SimHits.Watchers = {
       { string type = "EcalSimHitsValidProducer"
         untracked string instanceLabel="EcalValidInfo"
         untracked bool verbose = false
       }
  }
		
  # Mixing Module
  include "SimGeneral/MixingModule/data/mixNoPU.cfi"

  # ECAL conditions	
  include "CalibCalorimetry/Configuration/data/Ecal_FakeConditions.cff"

  # ECAL unsuppressed digis
  include "SimCalorimetry/EcalSimProducers/data/ecaldigi.cfi"	

  # ECAL unsuppressed digis validation sequence
  include "Validation/EcalDigis/data/ecalUnsuppressedDigisValidationSequence.cff"
       
  path p1 = { g4SimHits , mix , ecalUnsuppressedDigis, randomEngineStateProducer, ecalUnsuppressedDigisValidationSequence }
  endpath outpath = { o1 }

  }		
